From 47fae05c5b4ffed13b17109aa92d9f5efb1a2ab3 Mon Sep 17 00:00:00 2001
From: Marc Titinger <mtitinger@baylibre.com>
Date: Thu, 26 Nov 2015 15:26:27 +0100
Subject: [PATCH] iio: fake driver, based on ina2xx

# modprobe fake-adc
# iio_readdev fake-adc | od -x
WARNING: High-speed mode not enabled
0000000 0000 0001 0002 0003 5722 27ac 0040 0000
0000020 0000 0001 0002 0003 c478 2836 0040 0000
0000040 0000 0001 0002 0003 7eac 28c3 0040 0000
0000060 0000 0001 0002 0003 efb6 294b 0040 0000
0000100 0000 0001 0002 0003 5d1f 29d2 0040 0000
0000120 0000 0001 0002 0003 2f2a 2a5b 0040 0000
0000140 0000 0001 0002 0003 43bb 2ae2 0040 0000
0000160 0000 0001 0002 0003 afb3 2b69 0040 0000
0000200 0000 0001 0002 0003 f953 2bf0 0040 0000
0000220 0000 0001 0002 0003 3f35 2c78 0040 0000
0000240 0000 0001 0002 0003 834d 2cff 0040 0000
0000260 0000 0001 0002 0003 c6e7 2d86 0040 0000
0000300 0000 0001 0002 0003 a121 2e11 0040 0000

WARNING: THIS IS PROVIDED AS IS AND MIGHT CAUSE KERNEL PANIC
YOU HAVE BEEN WARNED ;)

Signed-off-by: Marc Titinger <mtitinger@baylibre.com>
---
 drivers/iio/adc/Kconfig    |   6 +
 drivers/iio/adc/Makefile   |   2 +
 drivers/iio/adc/fake-adc.c | 574 +++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 582 insertions(+)
 create mode 100644 drivers/iio/adc/fake-adc.c

diff --git a/drivers/iio/adc/Kconfig b/drivers/iio/adc/Kconfig
index 24bc9dc..7296c1b 100644
--- a/drivers/iio/adc/Kconfig
+++ b/drivers/iio/adc/Kconfig
@@ -170,6 +170,12 @@ config EXYNOS_ADC
 	  of SoCs for drivers such as the touchscreen and hwmon to use to share
 	  this resource.
 
+config FAKE_ADC
+        tristate "FAKE ADC driver"
+        select IIO_BUFFER
+        help
+          Say yes here to build support for a fake ADC.
+
 config INA2XX_IIO
 	tristate "Texas Instruments INA2xx Power Monitors IIO driver"
 	depends on I2C
diff --git a/drivers/iio/adc/Makefile b/drivers/iio/adc/Makefile
index 74e4341..3d706ef 100644
--- a/drivers/iio/adc/Makefile
+++ b/drivers/iio/adc/Makefile
@@ -19,8 +19,10 @@ obj-$(CONFIG_BERLIN2_ADC) += berlin2-adc.o
 obj-$(CONFIG_DA9150_GPADC) += da9150-gpadc.o
 obj-$(CONFIG_CC10001_ADC) += cc10001_adc.o
 obj-$(CONFIG_EXYNOS_ADC) += exynos_adc.o
+obj-$(CONFIG_FAKE_ADC) += fake-adc.o
 obj-$(CONFIG_INA2XX_IIO) += ina2xx-iio.o
 obj-$(CONFIG_LP8788_ADC) += lp8788_adc.o
+obj-$(CONFIG_LP8788_ADC) += lp8788_adc.o
 obj-$(CONFIG_MAX1027) += max1027.o
 obj-$(CONFIG_MAX1363) += max1363.o
 obj-$(CONFIG_MCP320X) += mcp320x.o
diff --git a/drivers/iio/adc/fake-adc.c b/drivers/iio/adc/fake-adc.c
new file mode 100644
index 0000000..bf93b4a
--- /dev/null
+++ b/drivers/iio/adc/fake-adc.c
@@ -0,0 +1,574 @@
+/*
+ * INA2XX Current and Power Monitors
+ *
+ * Copyright 2015 Baylibre SAS.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ *
+ * Based on linux/drivers/iio/adc/ad7291.c
+ * Copyright 2010-2011 Analog Devices Inc.
+ *
+ * Based on linux/drivers/hwmon/fake_adc.c
+ * Copyright 2012 Lothar Felten <l-felten@ti.com>
+ *
+ * Licensed under the GPL-2 or later.
+ *
+ * IIO driver for INA219-220-226-230-231
+ *
+ * Configurable 7-bit I2C slave address from 0x40 to 0x4F
+ */
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/kthread.h>
+#include <linux/delay.h>
+#include <linux/iio/kfifo_buf.h>
+#include <linux/regmap.h>
+#include <linux/iio/sysfs.h>
+
+
+#include <linux/util_macros.h>
+
+/*
+ * INA2XX registers definition
+ */
+#define INA2XX_CONFIG                   0x00
+#define INA2XX_SHUNT_VOLTAGE            0x01	/* readonly */
+#define INA2XX_BUS_VOLTAGE              0x02	/* readonly */
+#define INA2XX_POWER                    0x03	/* readonly */
+#define INA2XX_CURRENT                  0x04	/* readonly */
+#define INA2XX_CALIBRATION              0x05
+
+#define INA226_ALERT_MASK		0x06
+#define INA266_CVRF			BIT(3)
+
+/* register count */
+#define INA219_REGISTERS                6
+#define INA226_REGISTERS                8
+#define INA2XX_MAX_REGISTERS            8
+
+/* settings - depend on use case */
+#define INA219_CONFIG_DEFAULT           0x399F	/* PGA=8 */
+#define INA226_CONFIG_DEFAULT           0x4327
+#define INA226_DEFAULT_AVG              4
+#define INA226_DEFAULT_IT		1110
+
+#define INA2XX_RSHUNT_DEFAULT           10000
+
+/*
+ * bit mask for reading the averaging setting in the configuration register
+ * FIXME: use fake_regmap_fields.
+ */
+#define INA2XX_MODE_MASK	GENMASK(3, 0)
+
+#define INA226_AVG_MASK		GENMASK(11, 9)
+#define INA226_SHIFT_AVG(val)	((val) << 9)
+
+/* Integration time for VBus */
+#define INA226_ITB_MASK		GENMASK(8, 6)
+#define INA226_SHIFT_ITB(val)	((val) << 6)
+
+/* Integration time for VShunt */
+#define INA226_ITS_MASK		GENMASK(5, 3)
+#define INA226_SHIFT_ITS(val)	((val) << 3)
+
+static unsigned int fake_registers[INA2XX_MAX_REGISTERS];
+
+static struct iio_dev *platform_data;
+
+static int fake_regmap_read(void * regmap, unsigned int address,
+			    unsigned int *regval)
+{
+	if (!regval || (address > INA2XX_MAX_REGISTERS))
+		return -EINVAL;
+
+	*regval = fake_registers[address];
+	return 0;
+}
+
+static int fake_regmap_write(void * regmap, unsigned int address,
+                            unsigned int regval)
+{
+	if  (address > INA2XX_MAX_REGISTERS)
+		return -EINVAL;
+
+	fake_registers[address] = regval;
+	return 0;
+}
+
+
+struct fake_adc_config {
+	u16 config_default;
+	int calibration_factor;
+	int registers;
+	int shunt_div;
+	int bus_voltage_shift;
+	int bus_voltage_lsb;	/* uV */
+	int power_lsb;		/* uW */
+};
+
+struct fake_adc_chip_info {
+        struct regmap *regmap;
+	struct task_struct *task;
+	const struct fake_adc_config *config;
+	struct mutex state_lock;
+	int avg;
+	int itb; /* Bus voltage integration time uS */
+	int its; /* Shunt voltage integration time uS */
+};
+
+static const struct fake_adc_config fake_adc_config[] = {
+	[0] = {
+		    .config_default = INA226_CONFIG_DEFAULT,
+		    .calibration_factor = 5120000,
+		    .registers = INA226_REGISTERS,
+		    .shunt_div = 400,
+		    .bus_voltage_shift = 0,
+		    .bus_voltage_lsb = 1250,
+		    .power_lsb = 25000,
+		    },
+};
+
+static int fake_adc_get_value(struct fake_adc_chip_info *chip, u8 reg,
+			    unsigned int regval, int *val, int *uval)
+{
+	*val = 0;
+
+	switch (reg) {
+	case INA2XX_SHUNT_VOLTAGE:
+		/* signed register */
+		*uval = DIV_ROUND_CLOSEST((s16) regval,
+					  chip->config->shunt_div);
+		return IIO_VAL_INT_PLUS_MICRO;
+
+	case INA2XX_BUS_VOLTAGE:
+		*uval = (regval >> chip->config->bus_voltage_shift)
+			* chip->config->bus_voltage_lsb;
+		*val = *uval / 1000000;
+		*uval = *uval % 1000000;
+		return IIO_VAL_INT_PLUS_MICRO;
+
+	case INA2XX_POWER:
+		*uval = regval * chip->config->power_lsb;
+		*val = *uval / 1000000;
+		*uval = *uval % 1000000;
+		return IIO_VAL_INT_PLUS_MICRO;
+
+	case INA2XX_CURRENT:
+		/* signed register, LSB=1mA (selected), in mA */
+		*uval = (s16) regval * 1000;
+		return IIO_VAL_INT_PLUS_MICRO;
+
+	default:
+		/* programmer goofed */
+		WARN_ON_ONCE(1);
+	}
+	return -EINVAL;
+}
+
+static int fake_adc_read_raw(struct iio_dev *indio_dev,
+			   struct iio_chan_spec const *chan,
+			   int *val, int *val2, long mask)
+{
+	int ret;
+	struct fake_adc_chip_info *chip = iio_priv(indio_dev);
+	unsigned int regval;
+
+	switch (mask) {
+	case IIO_CHAN_INFO_RAW:
+		ret = fake_regmap_read(chip->regmap, chan->address, &regval);
+		if (ret < 0)
+			return ret;
+
+		return fake_adc_get_value(chip, chan->address, regval, val, val2);
+
+	case IIO_CHAN_INFO_OVERSAMPLING_RATIO:
+		*val = chip->avg;
+		return IIO_VAL_INT;
+
+	case IIO_CHAN_INFO_INT_TIME:
+		*val = 0;
+		if (chan->address == INA2XX_SHUNT_VOLTAGE)
+			*val2 = chip->its;
+		else
+			*val2 = chip->itb;
+
+		return IIO_VAL_INT_PLUS_MICRO;
+	/*
+	 * Sample freq is read only, it is a consequence of
+	 * 1/AVG*(CT_bus+CT_shunt).
+	 */
+	case IIO_CHAN_INFO_SAMP_FREQ:
+		*val = DIV_ROUND_CLOSEST(1000000,
+		       (chip->itb + chip->its) * chip->avg);
+
+		return IIO_VAL_INT;
+
+	default:
+		return -EINVAL;
+	}
+
+	return 0;
+}
+
+/*
+ * Available averaging rates for fake_adc. The indices correspond with
+ * the bit values expected by the chip (according to the fake_adc datasheet,
+ * table 3 AVG bit settings, found at
+ * http://www.ti.com/lit/ds/symlink/fake_adc.pdf.
+ */
+static const int fake_adc_avg_tab[] = { 1, 4, 16, 64, 128, 256, 512, 1024 };
+
+static int fake_adc_set_average(struct fake_adc_chip_info *chip, unsigned int val,
+			      unsigned int *config)
+{
+	int bits;
+
+	if (val > 1024 || val < 1)
+		return -EINVAL;
+
+	bits = find_closest(val, fake_adc_avg_tab,
+			    ARRAY_SIZE(fake_adc_avg_tab));
+
+	chip->avg = fake_adc_avg_tab[bits];
+
+	*config &= ~INA226_AVG_MASK;
+	*config |= INA226_SHIFT_AVG(bits) & INA226_AVG_MASK;
+
+	return 0;
+}
+
+/* Conversion times in uS */
+static const int fake_adc_conv_time_tab[] = { 140, 204, 332, 588, 1100,
+					    2116, 4156, 8244 };
+
+static int fake_adc_set_itb(struct fake_adc_chip_info *chip, unsigned int val,
+			  unsigned int *config)
+{
+	int bits;
+
+	if (val > 8244 || val < 140)
+		return -EINVAL;
+
+	bits = find_closest(val, fake_adc_conv_time_tab,
+			ARRAY_SIZE(fake_adc_conv_time_tab));
+
+	chip->itb = fake_adc_conv_time_tab[bits];
+
+	*config &= ~INA226_ITB_MASK;
+	*config |= INA226_SHIFT_ITB(bits) & INA226_ITB_MASK;
+
+	return 0;
+}
+
+static int fake_adc_set_its(struct fake_adc_chip_info *chip, unsigned int val,
+			  unsigned int *config)
+{
+	int bits;
+
+	if (val > 8244 || val < 140)
+		return -EINVAL;
+
+	bits = find_closest(val, fake_adc_conv_time_tab,
+			ARRAY_SIZE(fake_adc_conv_time_tab));
+
+	chip->its = fake_adc_conv_time_tab[bits];
+
+	*config &= ~INA226_ITS_MASK;
+	*config |= INA226_SHIFT_ITS(bits) & INA226_ITS_MASK;
+
+	return 0;
+}
+
+static int fake_adc_write_raw(struct iio_dev *indio_dev,
+			    struct iio_chan_spec const *chan,
+			    int val, int val2, long mask)
+{
+	struct fake_adc_chip_info *chip = iio_priv(indio_dev);
+	int ret = 0;
+	unsigned int config, tmp;
+
+	if (iio_buffer_enabled(indio_dev))
+		return -EBUSY;
+
+	mutex_lock(&chip->state_lock);
+
+	ret = fake_regmap_read(chip->regmap, INA2XX_CONFIG, &config);
+	if (ret < 0)
+		goto _err;
+
+	tmp = config;
+
+	switch (mask) {
+	case IIO_CHAN_INFO_OVERSAMPLING_RATIO:
+		ret = fake_adc_set_average(chip, val, &tmp);
+		break;
+
+	case IIO_CHAN_INFO_INT_TIME:
+		if (chan->address == INA2XX_SHUNT_VOLTAGE)
+			ret = fake_adc_set_its(chip, val, &tmp);
+		else
+			ret = fake_adc_set_itb(chip, val, &tmp);
+		break;
+	default:
+		ret = -EINVAL;
+	}
+
+	if (!ret && (tmp != config))
+		ret = fake_regmap_write(chip->regmap, INA2XX_CONFIG, tmp);
+_err:
+	mutex_unlock(&chip->state_lock);
+
+	return ret;
+}
+
+
+#define INA2XX_CHAN(_type, _index, _address) { \
+	.type = _type, \
+	.address = _address, \
+	.indexed = 1, \
+	.channel = (_index), \
+	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW), \
+	.info_mask_shared_by_dir = BIT(IIO_CHAN_INFO_SAMP_FREQ) | \
+				   BIT(IIO_CHAN_INFO_OVERSAMPLING_RATIO), \
+	.scan_index = (_index), \
+	.scan_type = { \
+		.sign = 'u', \
+		.realbits = 16, \
+		.storagebits = 16, \
+	.endianness = IIO_BE, \
+	} \
+}
+
+/*
+ * Sampling Freq is a consequence of the integration times of
+ * the Voltage channels.
+ */
+#define INA2XX_CHAN_VOLTAGE(_index, _address) { \
+	.type = IIO_VOLTAGE, \
+	.address = _address, \
+	.indexed = 1, \
+	.channel = (_index), \
+	.info_mask_separate = BIT(IIO_CHAN_INFO_RAW) | \
+			      BIT(IIO_CHAN_INFO_INT_TIME), \
+	.scan_index = (_index), \
+	.scan_type = { \
+		.sign = 'u', \
+		.realbits = 16, \
+		.storagebits = 16, \
+	.endianness = IIO_BE, \
+	} \
+}
+
+static const struct iio_chan_spec fake_adc_channels[] = {
+	INA2XX_CHAN_VOLTAGE(0, INA2XX_SHUNT_VOLTAGE),
+	INA2XX_CHAN_VOLTAGE(1, INA2XX_BUS_VOLTAGE),
+	INA2XX_CHAN(IIO_CURRENT, 2, INA2XX_CURRENT),
+	INA2XX_CHAN(IIO_POWER, 3, INA2XX_POWER),
+	IIO_CHAN_SOFT_TIMESTAMP(4),
+};
+
+static s64 prev_ns;
+
+static int fake_adc_work_buffer(struct iio_dev *indio_dev)
+{
+	struct fake_adc_chip_info *chip = iio_priv(indio_dev);
+	unsigned short data[8];
+	int bit, ret = 0, i = 0;
+	unsigned long buffer_us = 0, elapsed_us = 0;
+	s64 time_a, time_b;
+	unsigned int alert;
+
+	time_a = iio_get_time_ns();
+
+	/*
+	 * Single register reads: bulk_read will not work with fake_adc
+	 * as there is no auto-increment of the address register for
+	 * data length longer than 16bits.
+	 */
+	for_each_set_bit(bit, indio_dev->active_scan_mask,
+			 indio_dev->masklength) {
+		/* fake read */
+		data[i] = i;
+		i++;
+		schedule();
+	}
+
+	time_b = iio_get_time_ns();
+
+	iio_push_to_buffers_with_timestamp(indio_dev,
+					   (unsigned int *)data, time_a);
+
+	buffer_us = (unsigned long)(time_b - time_a) / 1000;
+	elapsed_us = (unsigned long)(time_a - prev_ns) / 1000;
+
+	trace_printk("uS: elapsed: %lu, buf: %lu\n", elapsed_us, buffer_us);
+
+	prev_ns = time_a;
+
+_err:
+	return buffer_us;
+};
+
+static int fake_adc_capture_thread(void *data)
+{
+	struct iio_dev *indio_dev = (struct iio_dev *)data;
+	struct fake_adc_chip_info *chip = iio_priv(indio_dev);
+	unsigned int sampling_us = (chip->itb + chip->its) * chip->avg;
+	unsigned long buffer_us;
+
+	do {
+		buffer_us = fake_adc_work_buffer(indio_dev);
+
+		if (sampling_us > buffer_us)
+			udelay(sampling_us - buffer_us);
+
+	} while (!kthread_should_stop());
+
+	return 0;
+}
+
+int fake_adc_buffer_enable(struct iio_dev *indio_dev)
+{
+	struct fake_adc_chip_info *chip = iio_priv(indio_dev);
+	unsigned int sampling_us = (chip->itb + chip->its) * chip->avg;
+
+	trace_printk("Enabling buffer w/ scan_mask %02x, freq = %d, avg =%u\n",
+		     (unsigned int)(*indio_dev->active_scan_mask),
+		     1000000/sampling_us, chip->avg);
+
+	trace_printk("Expected work period: %u us\n", sampling_us);
+
+	prev_ns = iio_get_time_ns();
+
+	chip->task = kthread_run(fake_adc_capture_thread, (void *)indio_dev,
+				 "fake_adc-%uus", sampling_us);
+
+	return PTR_ERR_OR_ZERO(chip->task);
+}
+
+int fake_adc_buffer_disable(struct iio_dev *indio_dev)
+{
+	struct fake_adc_chip_info *chip = iio_priv(indio_dev);
+
+	if (chip->task) {
+		kthread_stop(chip->task);
+		chip->task = NULL;
+	}
+	return 0;
+}
+
+static const struct iio_buffer_setup_ops fake_adc_setup_ops = {
+	.postenable = &fake_adc_buffer_enable,
+	.postdisable = &fake_adc_buffer_disable,
+};
+
+static int fake_adc_debug_reg(struct iio_dev *indio_dev,
+			    unsigned reg, unsigned writeval, unsigned *readval)
+{
+	struct fake_adc_chip_info *chip = iio_priv(indio_dev);
+
+	if (!readval)
+		return 0;
+
+	return reg;
+}
+
+/* Possible integration times for vshunt and vbus */
+static IIO_CONST_ATTR_INT_TIME_AVAIL("140 204 332 588 1100 2116 4156 8244");
+
+static struct attribute *fake_adc_attributes[] = {
+	&iio_const_attr_integration_time_available.dev_attr.attr,
+	NULL,
+};
+
+static const struct attribute_group fake_adc_attribute_group = {
+	.attrs = fake_adc_attributes,
+};
+
+static const struct iio_info fake_adc_info = {
+	.debugfs_reg_access = &fake_adc_debug_reg,
+	.read_raw = &fake_adc_read_raw,
+	.write_raw = &fake_adc_write_raw,
+	.attrs = &fake_adc_attribute_group,
+	.driver_module = THIS_MODULE,
+};
+
+static int fake_adc_probe( void /*struct platform_device *pdev*/)
+{
+	struct fake_adc_chip_info *chip;
+	struct iio_dev *indio_dev;
+	struct iio_buffer *buffer;
+	unsigned int val;
+
+	printk("FAKE_ADC_PROBE\n");
+
+	indio_dev = iio_device_alloc(sizeof(*chip));
+	if (!indio_dev)
+		return -ENOMEM;
+
+	chip = iio_priv(indio_dev);
+
+	chip->config = &fake_adc_config[0];
+
+	mutex_init(&chip->state_lock);
+
+	/* This is only used for device removal purposes. */
+	platform_data = indio_dev;
+
+	indio_dev->name = "fake-adc";
+	indio_dev->channels = fake_adc_channels;
+	indio_dev->num_channels = ARRAY_SIZE(fake_adc_channels);
+
+	indio_dev->dev.parent = NULL;
+	indio_dev->info = &fake_adc_info;
+	indio_dev->modes = INDIO_DIRECT_MODE | INDIO_BUFFER_SOFTWARE;
+
+	/* Patch the current config register with default. */
+	val = chip->config->config_default;
+
+	fake_adc_set_average(chip, INA226_DEFAULT_AVG, &val);
+	fake_adc_set_itb(chip, INA226_DEFAULT_IT, &val);
+	fake_adc_set_its(chip, INA226_DEFAULT_IT, &val);
+
+	buffer = iio_kfifo_allocate();
+	if (!buffer)
+		return -ENOMEM;
+
+	indio_dev->setup_ops = &fake_adc_setup_ops;
+
+	iio_device_attach_buffer(indio_dev, buffer);
+
+	return iio_device_register(indio_dev);
+}
+
+
+static void fake_adc_remove(void /*struct platform_device *pdev*/)
+{
+	iio_kfifo_free(platform_data->buffer);
+	iio_device_unregister(platform_data);
+}
+
+
+#if 0
+static struct platform_driver fake_adc_driver = {
+	.driver = {
+		   .name = KBUILD_MODNAME,
+//	.of_match_table = of_match_ptr(fake_match_table),
+	},
+	.probe = fake_adc_probe,
+	.remove = fake_adc_remove,
+};
+
+module_platform_driver(fake_adc_driver);
+
+#endif
+
+module_init(fake_adc_probe);
+module_exit(fake_adc_remove);
+
+
+MODULE_AUTHOR("Marc Titinger <marc.titinger@baylibre.com>");
+MODULE_DESCRIPTION("FAKE driver");
+MODULE_LICENSE("GPL v2");
-- 
1.9.1

